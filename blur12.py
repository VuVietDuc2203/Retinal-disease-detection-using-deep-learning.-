# -*- coding: utf-8 -*-
"""BLUR12.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QmDc1RLfAPkuUoXGTVpOIP0F8DPtpAbD
"""

import pandas as pd
import numpy as np
import cv2
import os

import cv2
import numpy as np
import matplotlib.pyplot as plt

image = cv2.imread("/home/ibmelab/Documents/ibme/RFMiD/train/Non/1032.png")
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
plt.show()

def gauss(img):

    # Tạo nhiễu Gaussian
    mean = 0
    var = 2
    sigma = var ** 0.000001

    gauss = np.random.normal(mean, sigma, img.shape)
    gauss = gauss.reshape(img.shape[0], img.shape[1], img.shape[2]).astype('uint8')

    # Thêm nhiễu Gaussian cho ảnh
    noisy_img = cv2.add(img, gauss)
    return noisy_img

nimg = gauss(image)
plt.imshow(cv2.cvtColor(nimg, cv2.COLOR_BGR2RGB))
plt.show()

def salt(img):
    # Kích thước ảnh
    height = img.shape[0]
    width  = img.shape[1]
    # Số điểm ảnh nhiễu
    num_noise_points = int(0.1 * height * width)  # Tùy chỉnh tỷ lệ nhiễu

    # Tạo điểm ảnh nhiễu
    for i in range(num_noise_points):
        x = np.random.randint(0, width)
        y = np.random.randint(0, height)
        value = np.random.choice([0, 255])  # Giá trị muối hoặc tiêu
        img[y, x] = [value, value, value]  # Áp dụng nhiễu

    return img

nimg = salt(image)
plt.imshow(cv2.cvtColor(nimg, cv2.COLOR_BGR2RGB))
plt.show()

def brightness(img):
    contrast_noise = np.random.uniform(low=0.1, high=1.3)  # Tùy chỉnh giới hạn tương phản
    brightness_noise = np.random.randint(low=10, high=30)  # Tùy chỉnh giới hạn sáng tối

    # Áp dụng nhiễu tương phản và sáng tối
    nois_image = np.multiply(img, contrast_noise)
    nois_image = np.clip(nois_image + brightness_noise, 0, 255).astype(np.uint8)
    return nois_image
n_img = brightness(image)
plt.imshow(cv2.cvtColor(n_img, cv2.COLOR_BGR2RGB))
plt.show()

def clahe(image):
    image_lab = cv2.cvtColor(image, cv2.COLOR_BGR2LAB)

    # Tách kênh L (Lightness) từ không gian màu LAB
    l_channel, a_channel, b_channel = cv2.split(image_lab)

    # Thực hiện CLAHE trên kênh L
    clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
    clahe_l_channel = clahe.apply(l_channel)

    # Gộp lại các kênh LAB và chuyển về không gian màu BGR
    clahe_image_lab = cv2.merge((clahe_l_channel, a_channel, b_channel))
    clahe_image = cv2.cvtColor(clahe_image_lab, cv2.COLOR_LAB2BGR)
    return clahe_image

root_path1 = '/home/ibmelab/Documents/ibme/RFMiDgoc/'
root_path2 = '/home/ibmelab/Documents/ibme/RFMiD/'

def transfer(root_path1,root_path2,mode,clsn):
    image_path1 = root_path1+mode+clsn
    file_names = os.listdir(image_path1)
    image_path2 = root_path2+mode+clsn

    for file_name in file_names:
        image = cv2.imread(image_path1+file_name)
        image = clahe(image)
        cv2.imwrite(image_path2+file_name, image)

classes = ['/AMD/' ,'/DR/','/Non/']
for classe in classes:
    transfer(root_path1,root_path2,mode = 'test',clsn = classe)

amd_folder = '/home/ibmelab/Documents/ibme/RFMiD/test/Non'
os.chdir(amd_folder)
file_names = os.listdir()
len(file_names)

amd_folder = '/home/ibmelab/Documents/ibme/RFMiDgoc/test/DR'
os.chdir(amd_folder)
file_names = os.listdir()
len(file_names)
for filename in file_names:
    img = cv2.imread(filename)
    bri_img = brightness(img)
    cv2.imwrite(f'br_{filename}', bri_img)

amd_folder = '/home/ibmelab/Documents/ibme/RFMiDgoc/train/DR'
os.chdir(amd_folder)
file_names = os.listdir()
len(file_names)
for filename in file_names:
    img = cv2.imread(filename)
    bri_img = brightness(img)
    cv2.imwrite(f'br_{filename}', bri_img)

amd_folder = '/home/ibmelab/Documents/ibme/RFMiDgoc/train/Non'
os.chdir(amd_folder)
file_names = os.listdir()
len(file_names)
for filename in file_names:
    img = cv2.imread(filename)
    bri_img = brightness(img)
    cv2.imwrite(f'br_{filename}', bri_img)

amd_folder = '/home/ibmelab/Documents/ibme/RFMiDgoc/validation/Non'
os.chdir(amd_folder)
file_names = os.listdir()
len(file_names)
for filename in file_names:
    img = cv2.imread(filename)
    bri_img = brightness(img)
    cv2.imwrite(f'br_{filename}', bri_img)

amd_folder = '/home/ibmelab/Documents/ibme/RFMiDgoc/test/Non'
os.chdir(amd_folder)
file_names = os.listdir()
len(file_names)
for filename in file_names:
    img = cv2.imread(filename)
    bri_img = brightness(img)
    cv2.imwrite(f'br_{filename}', bri_img)